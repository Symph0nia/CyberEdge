{"openapi":"3.0.1","info":{"title":"CyberEdge","description":"","version":"1.0.0"},"tags":[],"paths":{"/auth/check":{"get":{"summary":"JWT鉴权","deprecated":false,"description":"## GET /auth/check\n\n### 请求头参数\n\n| 参数名        | 必填 | 类型   | 描述                                |\n|---------------|------|--------|-------------------------------------|\n| Authorization | 是   | string | JWT令牌，格式为 \"Bearer <token>\"    |\n\n### 请求体参数\n\n无\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\n```json\n{\n  \"authenticated\": true,\n  \"account\": \"<用户账号>\"\n}\n```\n\n#### 失败响应 (HTTP 状态码: 401 Unauthorized)\n\n1. 未提供令牌\n```json\n{\n  \"authenticated\": false,\n  \"error\": \"未提供令牌\"\n}\n```\n\n2. 无效的令牌格式\n```json\n{\n  \"authenticated\": false,\n  \"error\": \"无效的令牌格式\"\n}\n```\n\n3. 无效的令牌\n```json\n{\n  \"authenticated\": false,\n  \"error\": \"无效的令牌\"\n}\n```\n\n### 注意事项\n\n1. JWT令牌应在 Authorization 头中提供，格式为 \"Bearer <token>\"。\n2. 令牌将被验证其有效性和签名方法。\n3. 如果令牌有效，响应中将包含认证状态和用户账号。\n4. 如果令牌无效或未提供，将返回相应的错误信息。\n\n这个接口主要用于验证JWT的有效性，客户端可以使用它来检查用户的认证状态。","tags":[],"parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{"authenticated":{"type":"boolean"},"account":{"type":"string"}},"required":["authenticated","account"]},"examples":{"1":{"summary":"成功示例","value":{"authenticated":true,"account":"<用户账号>"}}}}},"headers":{"Authorization":{"example":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50Ijoic0NQdXZ0b3VYV1dhS3JJeiIsImV4cCI6MTczMDI5NTgxOX0.S0FOAhZCgYru8IqEg2kzysJYsEQysAzNItdSUQZ1Ooo","required":false,"description":"JWT令牌，格式为 \"Bearer <token>\"","schema":{"type":"string"}}}}},"security":[{"bearer":[]}]}},"/auth/qrcode":{"get":{"summary":"获取登录二维码","deprecated":false,"description":"## GET /auth/qrcode\n\n### 请求参数\n\n此接口不需要任何请求参数。\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\nContent-Type: image/png\n\n响应体: 二维码图片的二进制数据\n\n#### 失败响应 (HTTP 状态码: 403 Forbidden 或 500 Internal Server Error)\n\nContent-Type: application/json\n\n1. 二维码接口已关闭 (403 Forbidden)\n```json\n{\n  \"error\": \"二维码接口已关闭\"\n}\n```\n\n2. 内部服务器错误 (500 Internal Server Error)\n```json\n{\n  \"error\": \"<错误描述>\"\n}\n```\n\n可能的错误描述包括：\n- \"无法获取二维码状态\"\n- \"无法生成账户名称\"\n- \"无法生成密钥\"\n- \"无法存储密钥\"\n- \"无法生成二维码\"\n- \"无法编码二维码\"\n\n### 注意事项\n\n1. 此接口首先检查二维码功能是否启用。如果未启用，将返回 403 错误。\n2. 接口会生成一个随机的账户名称和相应的 TOTP (基于时间的一次性密码) 密钥。\n3. 生成的账户信息会被存储到数据库中。\n4. 成功时，接口返回一个包含 TOTP 信息的二维码图片（PNG 格式）。\n5. 客户端应该准备处理可能的错误响应，这些错误响应会以 JSON 格式返回。\n6. 二维码图片的尺寸为 200x200 像素。\n\n这个接口主要用于生成新的 TOTP 二维码，通常用于用户注册或添加双因素认证。客户端应该能够显示返回的二维码图片，让用户使用 TOTP 应用程序（如 Google Authenticator）扫描。","tags":[],"parameters":[],"responses":{"200":{"description":"","content":{"image/png":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[]}},"/auth/validate":{"post":{"summary":"登录验证","deprecated":false,"description":"## POST /auth/validate\n\n### 请求参数\n\nContent-Type: application/json\n\n请求体:\n```json\n{\n  \"code\": \"string\",\n  \"account\": \"string\"\n}\n```\n\n| 字段名  | 类型   | 必填 | 描述                 |\n|---------|--------|------|----------------------|\n| code    | string | 是   | 用户输入的 TOTP 代码 |\n| account | string | 是   | 用户账户名           |\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\n```json\n{\n  \"status\": \"验证码有效\",\n  \"token\": \"string\",\n  \"loginCount\": number\n}\n```\n\n| 字段名     | 类型   | 描述                     |\n|------------|--------|--------------------------|\n| status     | string | 验证状态                 |\n| token      | string | JWT 令牌                 |\n| loginCount | number | 更新后的用户登录次数     |\n\n#### 失败响应\n\n1. 请求格式错误 (HTTP 状态码: 400 Bad Request)\n```json\n{\n  \"error\": \"验证码和账户是必需的\"\n}\n```\n\n2. 认证失败 (HTTP 状态码: 401 Unauthorized)\n```json\n{\n  \"error\": \"无法找到密钥\"\n}\n```\n或\n```json\n{\n  \"error\": \"验证码无效\"\n}\n```\n\n3. 服务器内部错误 (HTTP 状态码: 500 Internal Server Error)\n```json\n{\n  \"error\": \"无法更新登录次数\"\n}\n```\n或\n```json\n{\n  \"error\": \"无法生成令牌\"\n}\n```\n\n### 注意事项\n\n1. 请求必须包含 TOTP 验证码和用户账户名。\n2. 如果验证成功，响应中将包含一个 JWT 令牌和更新后的登录次数。\n3. JWT 令牌的有效期为 72 小时。\n4. 如果验证失败（无效的验证码或找不到用户），将返回相应的错误信息。\n5. 此接口会在验证成功后自动增加用户的登录次数。\n6. 客户端应该妥善保存返回的 JWT 令牌，用于后续的认证请求。\n\n这个接口主要用于验证用户提供的 TOTP 代码，并在验证成功后生成 JWT 令牌用于后续的身份验证。","tags":[],"parameters":[],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"code":{"type":"string"},"account":{"type":"string"}},"required":["code","account"]},"example":{"code":"string","account":"string"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[]}},"/auth/qrcode/status":{"get":{"summary":"获取注册二维码启用状态","deprecated":false,"description":"## GET /auth/qrcode/status\n\n### 请求参数\n\n此 GET 请求不需要任何参数。\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\n```json\n{\n  \"enabled\": boolean\n}\n```\n\n| 字段名  | 类型    | 描述                 |\n|---------|---------|----------------------|\n| enabled | boolean | 二维码接口是否启用   |\n\n#### 失败响应 (HTTP 状态码: 500 Internal Server Error)\n\n```json\n{\n  \"error\": \"无法获取二维码状态\"\n}\n```\n\n### 注意事项\n\n1. 此接口用于查询二维码功能的当前状态。\n2. 返回的 `enabled` 字段表示二维码功能是否当前处于启用状态。\n\n这两个接口共同提供了查询和更新二维码功能状态的能力，可用于管理员控制系统的二维码生成功能。","tags":[],"parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]},"post":{"summary":"更改注册二维码启用状态","deprecated":false,"description":"## POST /auth/qrcode/status\n\n### 请求参数\n\nContent-Type: application/json\n\n请求体:\n```json\n{\n  \"enabled\": boolean\n}\n```\n\n| 字段名  | 类型    | 必填 | 描述                 |\n|---------|---------|------|----------------------|\n| enabled | boolean | 是   | 设置二维码接口的状态 |\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\n```json\n{\n  \"status\": \"二维码接口状态已更新\",\n  \"enabled\": boolean\n}\n```\n\n| 字段名  | 类型    | 描述                     |\n|---------|---------|--------------------------|\n| status  | string  | 操作状态描述             |\n| enabled | boolean | 更新后的二维码接口状态   |\n\n#### 失败响应\n\n1. 请求格式错误 (HTTP 状态码: 400 Bad Request)\n```json\n{\n  \"error\": \"请求格式错误\"\n}\n```\n\n2. 服务器内部错误 (HTTP 状态码: 500 Internal Server Error)\n```json\n{\n  \"error\": \"无法更新二维码状态\"\n}\n```\n\n### 注意事项\n\n1. 此接口用于更新二维码功能的状态。\n2. 请求体中的 `enabled` 字段用于指定是否启用二维码功能。\n3. 成功更新后，响应中会返回更新后的状态。\n4. 只有经过身份验证的用户才能访问此接口。\n5. 更改二维码状态可能会影响系统的其他部分，如用户注册或登录流程。\n\n这两个接口共同提供了查询和更新二维码功能状态的能力，可用于管理员控制系统的二维码生成功能。","tags":[],"parameters":[],"requestBody":{"content":{"text/plain":{"schema":{"type":"string"},"example":"{\n  \"enabled\": true\n}"}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]}},"/users":{"get":{"summary":"多用户查询","deprecated":false,"description":"## GET /users\n\n### 请求参数\n\n无\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\n```json\n[\n  {\n    \"account\": \"string\",\n    \"secret\": \"string\",\n    \"loginCount\": number\n  },\n  ...\n]\n```\n\n#### 失败响应 (HTTP 状态码: 500 Internal Server Error)\n\n```json\n{\n  \"error\": \"无法获取用户\"\n}\n```\n\n或\n\n```json\n{\n  \"error\": \"无法解析用户数据\"\n}\n```\n\n### 注意事项\n\n- 此接口返回所有用户的列表。\n- 需要认证才能访问。","tags":[],"parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"type":"object","properties":{"account":{"type":"string"},"loginCount":{"type":"integer"}},"required":["account","loginCount"]}},"examples":{"1":{"summary":"成功示例","value":[{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"Nc99PfcVA1Jxa8my","loginCount":0},{"account":"VoBZSVnZjrtbF4od","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"","loginCount":0},{"account":"sCPuvtouXWWaKrIz","loginCount":1}]}}}},"headers":{}}},"security":[{"bearer":[]}]},"post":{"summary":"添加单用户","deprecated":true,"description":"## POST /users\n\n### 请求参数\n\nContent-Type: application/json\n\n请求体:\n\n```json\n{\n  \"account\": \"string\",\n  \"secret\": \"string\",\n  \"loginCount\": number\n}\n```\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 201 Created)\n\n```json\n{\n  \"status\": \"用户已添加\"\n}\n```\n\n#### 失败响应\n\n1. 请求格式错误 (HTTP 状态码: 400 Bad Request)\n\n```json\n{\n  \"error\": \"请求格式错误\"\n}\n```\n\n2. 服务器错误 (HTTP 状态码: 500 Internal Server Error)\n\n```json\n{\n  \"error\": \"无法添加用户\"\n}\n```\n\n### 注意事项\n\n- 此接口用于创建新用户。\n- 需要认证才能访问。","tags":[],"parameters":[],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"account":{"type":"string"},"secret":{"type":"string"},"loginCount":{"type":"integer"}},"required":["account","secret","loginCount"]},"example":{"account":"string","secret":"string","loginCount":123}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]}},"/users/{account}":{"get":{"summary":"单用户查询","deprecated":false,"description":"## GET /users/:account\n\n### 请求参数\n\n| 参数名  | 位置 | 类型   | 必填 | 描述     |\n| ------- | ---- | ------ | ---- | -------- |\n| account | path | string | 是   | 用户账号 |\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\n```json\n{\n  \"account\": \"string\",\n  \"secret\": \"string\",\n  \"loginCount\": number\n}\n```\n\n#### 失败响应 (HTTP 状态码: 404 Not Found)\n\n```json\n{\n  \"error\": \"用户未找到\"\n}\n```\n\n### 注意事项\n\n- 此接口返回指定账号的用户信息。\n- 需要认证才能访问。","tags":[],"parameters":[{"name":"account","in":"path","description":"","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{"account":{"type":"string"},"loginCount":{"type":"integer"}},"required":["account","loginCount"]},"examples":{"1":{"summary":"成功示例","value":{"account":"sCPuvtouXWWaKrIz","loginCount":1}}}}},"headers":{}}},"security":[{"bearer":[]}]},"delete":{"summary":"删除单用户","deprecated":false,"description":"## DELETE /users/:account\n\n### 请求参数\n\n| 参数名  | 位置 | 类型   | 必填 | 描述     |\n| ------- | ---- | ------ | ---- | -------- |\n| account | path | string | 是   | 用户账号 |\n\n### 响应格式\n\n#### 成功响应 (HTTP 状态码: 200 OK)\n\n```json\n{\n  \"status\": \"用户已删除\"\n}\n```\n\n#### 失败响应\n\n1. 缺少参数 (HTTP 状态码: 400 Bad Request)\n\n```json\n{\n  \"error\": \"需要提供用户名\"\n}\n```\n\n2. 服务器错误 (HTTP 状态码: 500 Internal Server Error)\n\n```json\n{\n  \"error\": \"无法删除用户\"\n}\n```\n\n### 注意事项\n\n- 此接口用于删除指定账号的用户。\n- 需要认证才能访问。\n- 删除操作是不可逆的，应谨慎使用。","tags":[],"parameters":[{"name":"account","in":"path","description":"","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]}},"/tasks":{"post":{"summary":"单任务创建","deprecated":false,"description":"","tags":[],"parameters":[],"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"target":{"type":"string"}},"required":["target"]},"example":{"target":"example.com"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]},"get":{"summary":"多任务查询","deprecated":false,"description":"","tags":[],"parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]}},"/tasks/{id}":{"delete":{"summary":"单任务删除","deprecated":false,"description":"","tags":[],"parameters":[{"name":"id","in":"path","description":"","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]}},"/tasks/{id}/start":{"post":{"summary":"单任务启动","deprecated":false,"description":"","tags":[],"parameters":[{"name":"id","in":"path","description":"","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"object","properties":{}}}},"headers":{}}},"security":[{"bearer":[]}]}}},"components":{"schemas":{"Config":{"type":"object","properties":{"_id":{"type":"string"},"qrcode_enabled":{"type":"boolean"}},"required":["_id","qrcode_enabled"]},"Tasks":{"type":"object","properties":{"_id":{"type":"string"},"type":{"type":"string"},"status":{"type":"string"},"payload":{"type":"string"},"created_at":{"type":"string"},"updated_at":{"type":"string"},"completed_at":{"type":"string"},"result":{"type":"string"}},"required":["_id","type","status","payload","created_at","updated_at","completed_at","result"]},"Users":{"type":"object","properties":{"_id":{"type":"string"},"account":{"type":"string"},"secret":{"type":"string"},"loginCount":{"type":"integer"}},"required":["_id","account","secret","loginCount"]}},"securitySchemes":{"bearer":{"type":"http","scheme":"bearer"}}},"servers":[]}