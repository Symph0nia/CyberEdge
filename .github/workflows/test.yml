name: Tests

on:
  push:
    branches: [ main, dev, feature/* ]
  pull_request:
    branches: [ main, dev ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: cyberedge_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.4'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h"127.0.0.1" -P"3306" -uroot -ppassword --silent; do
          echo 'waiting for mysql...'
          sleep 1
        done

    - name: Run tests
      working-directory: ./backend
      env:
        GIN_MODE: test
        JWT_SECRET: test-secret-for-github-actions
        MYSQL_DSN: root:password@tcp(127.0.0.1:3306)/cyberedge_test?charset=utf8mb4&parseTime=True&loc=Local
      run: |
        go test -v -coverprofile=coverage.out ./pkg/...
        go tool cover -func=coverage.out

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:run

    - name: Run lint
      working-directory: ./frontend
      run: npm run lint

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run basic security checks
      run: |
        echo "🔍 Running basic security checks..."

        # Check for hardcoded secrets in Go files
        echo "检查Go文件中的硬编码密钥..."
        if grep -r "password\s*=\s*\"" backend/ --include="*.go"; then
          echo "⚠️ 发现可能的硬编码密码"
        fi

        # Check for SQL injection patterns
        echo "检查SQL注入模式..."
        if grep -r "fmt\.Sprintf.*SELECT\|fmt\.Sprintf.*INSERT\|fmt\.Sprintf.*UPDATE" backend/ --include="*.go"; then
          echo "⚠️ 发现可能的SQL注入风险"
        fi

        # Check for XSS patterns in frontend
        echo "检查前端XSS模式..."
        if grep -r "innerHTML\|dangerouslySetInnerHTML" frontend/src/ --include="*.js" --include="*.vue"; then
          echo "⚠️ 发现可能的XSS风险"
        fi

        echo "✅ 基础安全检查完成"

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.4'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Build backend
      working-directory: ./backend
      run: |
        go mod download
        go build -o cyberedge cmd/cyberedge.go

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Test start script
      run: |
        chmod +x start-dev.sh
        # Test script validation (not actual start)
        bash -n start-dev.sh